#include <stdio.h>
#include<stdlib.h>
#include<string.h>
int Max=5;
char stack[20];
int top=-1;
void push(char stack[],char ele){
    if(top==Max-1){
        printf("\n stack overflow \n");
        return ;
    }
    stack[++top]=ele;
}
int pop(){
    if(top==-1){
        printf("\n stack underflow \n");
        return(-1);
    }
    return(stack[top--]);
}
int palindrome(char str[]){
    int i,mid;
    mid=strlen(str)/2;
    for(i=0;i<mid;i++){
        push(stack,str[i]);
    }
    if(strlen(str)%2!=0){
        i++;
    }
    while(str[i]!='\0'){
        if(str[i]==pop()){
            i++;
        }
        else{
            return 0;
        }
    }
    return 1;
}
int main(){
    int x;
    char str[20];
    printf("enter a string to check whether it is palindrome or not:");
    scanf("%s",str);
    x=palindrome(str);
    if(x){
        printf("\n string is a palindrome \n");
    }
    else{
        printf("\n string is not a palindrome \n");
    }
}

















students_data = [
    {"Name": "John", "Roll_no": 101, "Avg_Marks": 90},
    {"Name": "Alice", "Roll_no": 102, "Avg_Marks": 80},
    {"Name": "Bob", "Roll_no": 103, "Avg_Marks": 88},
    # Add more student details as needed
]

# Function to display students with more than 85% marks
def display_high_scoring_students(data):
    print("Students with more than 85% marks:")
    print("---------------------------------")
    for student in data:
        if student["Avg_Marks"] > 85:
            print(f"Name: {student['Name']}, Roll_no: {student['Roll_no']}, Avg_Marks: {student['Avg_Marks']}")

# Call the function with your data
display_high_scoring_students(students_data)



#include <stdio.h>

int binarySearch(int *arr, int size, int target) {
    int left = 0, right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            return mid; // Element found, return the index
        } else if (arr[mid] < target) {
            left = mid + 1; // Search in the right half
        } else {
            right = mid - 1; // Search in the left half
        }
    }

    return -1; // Element not found
}

int main() {
    int arr[] = {2, 5, 8, 12, 16, 23, 38, 42, 50, 65}; // Sorted list of numbers
    int size = sizeof(arr) / sizeof(arr[0]);
    int target;

    printf("Enter the number to search: ");
    scanf("%d", &target);

    int result = binarySearch(arr, size, target);

    if (result != -1) {
        printf("Element %d found at index %d.\n", target, result);
    } else {
        printf("Element %d not found in the list.\n", target);
    }

    return 0;
}
